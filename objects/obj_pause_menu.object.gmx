<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dialog</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_dialog</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>btn_w = sprite_get_width(spr_menu_w);
btn_h = sprite_get_height(spr_menu_w);
//width = sprite_get_width(sprite_index);
//height = sprite_get_height(sprite_index);

var half_w = (x + sprite_width / 2) | 0;
var half_btn_w = (btn_w / 2) | 0;

btn_center_x =  half_w  - half_btn_w | 0; 
btn_y =  (y + 451) | 0; 

btn_left_x = btn_center_x - half_btn_w;
btn_right_x = btn_center_x + half_btn_w

restart_x = btn_center_x;
restart_y = btn_y;
restart_index = 0;

menu_x =  restart_x - btn_w - 10;
menu_y =  btn_y;
menu_index = 0;

help_x = restart_x + btn_w + 10;
help_y = btn_y;
help_index = 0;

title_x = (x + 35) | 0;
title_y = (y + 20) | 0;

scr_dialog_create_close_vars();


var slider_x = x + 65;
var lbl_x = x + 30;
var y_delta = 48;
fx_vol_lbl_x = lbl_x;
fx_vol_lbl_y = y + 120;

slider_fx_y = fx_vol_lbl_y + y_delta;
fx_slider = scr_create_vol_slider(slider_x, slider_fx_y, 320, global.fx_snd_vol);

bg_vol_lbl_x = lbl_x;
bg_vol_lbl_y = slider_fx_y + y_delta;

slider_bg_y = bg_vol_lbl_y + y_delta;
bg_slider = scr_create_vol_slider(slider_x, slider_bg_y, 320, global.bg_snd_vol);

//hint
//global.show_hint
hint_lbl_x = lbl_x;
hint_lbl_y = slider_bg_y + y_delta;

hint_w = sprite_get_width(spr_check_box);
hint_h = sprite_get_height(spr_check_box);

hint_x = hint_lbl_x + 100;
hint_y = hint_lbl_y + 10;

hint_test_x = (hint_x - hint_w /2) | 0;
hint_test_y = (hint_y - hint_h /2) | 0;

hint_mark_x = hint_x;
hint_mark_y = hint_y;

hint_index = 0;

//show_board
//global.show_board
board_lbl_x = lbl_x;
board_lbl_y = hint_lbl_y + y_delta;

board_w = sprite_get_width(spr_check_box);
board_h = sprite_get_height(spr_check_box);

board_x = board_lbl_x + 215;
board_y = board_lbl_y + 10;

board_test_x = (board_x - board_w /2) | 0;
board_test_y = (board_y - board_h /2) | 0;

board_mark_x = board_x;
board_mark_y = board_y;

board_index = 0;


disable_menu = false;
disable_restart = false;

emitter1 = part_emitter_create(p_system_front);





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if instance_exists(fx_slider) then with(fx_slider) instance_destroy();
if instance_exists(bg_slider) then with(bg_slider) instance_destroy();

ini_open("atom_smashem.ini");
ini_write_real("SND", "BG", bg_snd_vol);
ini_write_real("SND", "FX", fx_snd_vol);
ini_write_real("OPT", "HINT", global.show_hint);
ini_write_real("OPT", "BOARD", global.show_board);
ini_close(); 


//CLEANUP
part_emitter_destroy(global.p_system_front, emitter1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RESTART

//CLEANUP
part_emitter_destroy(global.p_system_front, emitter1);

score = 0;
global._loaded = false;

instance_destroy();
room_restart();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LANCH HELP
scr_play_snd(Sound.Click);

instance_destroy();

scr_launch_help();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RESTART - DOES EFFECTS

scr_play_snd(Sound.AtomPop);

visible = false;
if instance_exists(fx_slider) then with(fx_slider) visible = false;
if instance_exists(bg_slider) then with(bg_slider) visible = false;


with(obj_atom)
{
    scr_eject_electrons(false);     
    state = AtomState.DestroyRestart;    
    visible = false;
    instance_destroy();
}


//if  os_browser != browser_not_a_browser
//{

    
    var rad = 200;
    var cx = room_width / 2;
    var cy = room_height / 2;
    var xmax = cx + rad;
    var xmin = cx - rad;
    var ymax = cy + rad;
    var ymin = cy - rad;
    var c1 = choose($fee700,$876714, $fe6200, c_white, $50fe00, $fe00d0, $0021fe, $fee800);
    var c2 = choose($fee700,$876714, $fe6200, c_white, $50fe00, $fe00d0, $0021fe, $fee800);

     //set color
     if os_browser == browser_not_a_browser then part_type_colour_mix(global.p_atom_smoke,c1, c2);
    
    //Now to set the emitter position and distribution
    part_emitter_region(global.p_system_front, emitter1, xmin, xmax, ymin, ymax, ps_shape_ellipse, ps_distr_gaussian); 
    
    //Finally, burst the particles from the emitter
    part_emitter_burst(global.p_system_back, emitter1, global.p_poof, 10);
    
    

//}


alarm[6] = room_speed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle Board
scr_play_snd(Sound.Click);
global.show_board = not global.show_board;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle Hint
scr_play_snd(Sound.Click);
global.show_hint = not global.show_hint;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///go to menu
scr_play_snd(Sound.Click);
room_goto(rm_reactor_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///close dialog
scr_play_snd(Sound.Click);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//disable_menu

var help_test = scr_btn_click(help_x, help_y, help_x + btn_w, help_y + btn_h);
if help_test &lt; 3 then help_index = help_test else alarm[5] = 1;
    

restart_index = 0;
if disable_restart
{
    restart_index = 3;
}
else
{
    var restart_test = scr_btn_click(restart_x, restart_y, restart_x + btn_w, restart_y + btn_h);
    if restart_test &lt; 3 then restart_index = restart_test else alarm[4] = 1;
}

menu_index = 0;
if disable_menu
{
    menu_index = 3;
}
else
{
    var menu_test = scr_btn_click(menu_x, menu_y, menu_x + btn_w, menu_y + btn_h);
    if menu_test &lt; 3 then menu_index = menu_test else alarm[1] = 1;
}


var close_test = scr_btn_click(close_x, close_y, close_x + close_width, close_y + close_height);
if close_test &lt; 3 then close_index = close_test else alarm[0] = 1;

global.fx_snd_vol = fx_slider.volume;
global.bg_snd_vol = bg_slider.volume;

var hint_test = scr_btn_click(hint_test_x, hint_test_y, hint_test_x + hint_w, hint_test_y + hint_h);
if hint_test &lt; 3 then hint_index = hint_test else alarm[2] = 1;

var board_test = scr_btn_click(board_test_x, board_test_y, board_test_x + board_w, board_test_y + board_h);
if board_test &lt; 3 then board_index = board_test else alarm[3] = 1;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CLEANUP
part_emitter_destroy(global.p_system_front, emitter1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_font(fnt_game_36);
draw_text(title_x, title_y, "Settings");

draw_sprite(spr_restart_w, restart_index, restart_x, restart_y);
draw_sprite(spr_menu_w, menu_index, menu_x, menu_y);
draw_sprite(spr_close, close_index, close_x, close_y);

draw_set_font(fnt_game_18);

draw_text(fx_vol_lbl_x, fx_vol_lbl_y, "Effects");
draw_text(fx_vol_lbl_x + 135, fx_vol_lbl_y, "Volume:");

draw_text(bg_vol_lbl_x, bg_vol_lbl_y, "Background");
draw_text(bg_vol_lbl_x + 188, bg_vol_lbl_y, "Volume:");

draw_text(hint_lbl_x, hint_lbl_y, "Hint:");
draw_sprite(spr_check_box, hint_index, hint_x, hint_y);

if global.show_hint
then draw_sprite(spr_checkmark, hint_index, hint_mark_x, hint_mark_y);

draw_text(board_lbl_x, board_lbl_y, "Game_Board:");
draw_sprite(spr_check_box, board_index, board_x, board_y);

if global.show_board 
then draw_sprite(spr_checkmark, board_index, board_mark_x, board_mark_y);



draw_sprite(spr_help_w, help_index, help_x, help_y);




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
