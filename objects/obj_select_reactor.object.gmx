<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dialog_sm</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
image_speed = 0;
image_index = 0;
image_xscale = .75;

reactor_h = sprite_get_height(spr_pleasent_nuclear);
reactor_w = sprite_get_width(spr_pleasent_nuclear);

var cx = (room_width / 2) | 0;
var cy = (room_height / 2) | 0;

x = cx - (sprite_width / 2) | 0; 
y = cy + ((reactor_h / 2) | 0);

//buttons 
back_y = y + 8;
back_x = x + 14;
back_w = sprite_get_width(spr_back_w);
back_h = sprite_get_height(spr_back_w);
back_index = 0;

next_y = back_y;
next_x = back_x + 84;
next_w = sprite_get_width(spr_next_w);
next_h = sprite_get_height(spr_next_w);
next_index = 0;

reactor_y = cy - 32;
reactor_x0 = cx - reactor_w; 
reactor_x1 = cx;
reactor_x2 = cx + reactor_w;

reactors = 0;

//make sure recators are unlocked if they are supposed to be 
scr_reactor_insure_consistency();

switch(scr_reactor_get_last_visited())
{
    case 1:  //BIG CITY 
        reactors[0] = instance_create(reactor_x0, reactor_y, obj_pleasant_nuclear); 
        reactors[1] = instance_create(reactor_x1, reactor_y, obj_big_city_power);
        reactors[2] = instance_create(reactor_x2, reactor_y, obj_golden_valley);        
        break;
    case 2: //GOLDEN VALLEY
        reactors[0] = instance_create(reactor_x0, reactor_y, obj_big_city_power);
        reactors[1] = instance_create(reactor_x1, reactor_y, obj_golden_valley);
        reactors[2] = instance_create(reactor_x2, reactor_y, obj_pleasant_nuclear);   
        break; 
        
    default: //PN
        reactors[0] = instance_create(reactor_x0, reactor_y, obj_golden_valley);
        reactors[1] = instance_create(reactor_x1, reactor_y, obj_pleasant_nuclear);
        reactors[2] = instance_create(reactor_x2, reactor_y, obj_big_city_power);
        break; 
}


reactor_index = 1;
reactor_cnt = array_length_1d(reactors);

mov_speed = 50;
path_left = path_add();
path_add_point(path_left, cx, reactor_y, mov_speed);
path_add_point(path_left, cx - reactor_w, reactor_y, 100);

path_set_kind(path_left, 1); //smooth
path_set_precision(path_left, 4);
path_set_closed(path_left, false); //make sure it is an open path

path_right = path_duplicate(path_left);
path_reverse(path_right);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_delete(path_right);
path_delete(path_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHIFT REACTORS TO THE LEFT

//check if already moving 
var moving = false;
for(var i=0; i&lt;3; i++) 
    with(reactors[i])
        if speed != 0 or path_speed != 0 
            then moving = true;
            
if moving 
then exit;

for(var i=0; i&lt;3; i++)
{
    with(reactors[i])
    {
        path_start(other.path_left, other.mov_speed, path_action_stop, false);
    }
}

var obj_index = reactors[0].object_index
var new_reactor = instance_create(reactor_x2 + reactor_w, reactor_y, obj_index);

with(new_reactor)
{
    path_start(other.path_left, other.mov_speed, path_action_stop, false);
}

reactors[0].destroy = true;
reactors[0] = reactors[1];
reactors[1] = reactors[2];
reactors[2] = new_reactor;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHIFT REACTORS TO THE RIGHT

/****
var moving = false;
for(var i=0; i&lt;3; i++) 
    with(reactors[i])
        if speed != 0 or path_speed != 0 
            then moving = true;//check if already moving 
****/

var moving = scr_check_UI_is_moving(reactors, 3);            
if moving then exit;

for(var i=0; i&lt;3; i++)
{
    with(reactors[i])
    {
        path_start(other.path_right, other.mov_speed, path_action_stop, false);
    }
}

var obj_index = reactors[2].object_index
var new_reactor = instance_create(reactor_x0 - reactor_w, reactor_y, obj_index);

with(new_reactor)
{
    path_start(other.path_right, other.mov_speed, path_action_stop, false);
}

reactors[2].destroy = true;
reactors[2] = reactors[1];
reactors[1] = reactors[0];
reactors[0] = new_reactor;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
back_index = 3;
next_index = 3;

if global.dialog_shown then exit;

for(var i=0; i&lt;reactor_cnt; i++)
{
    if reactors[i].x &gt; 0 and reactors[i].x &lt; room_width
    then reactor_index = i;
}


//if reactor_index &gt; 0
{
    var b_test = scr_btn_click(back_x, back_y, back_x + back_w, back_y + back_h);
    if b_test &lt; 3 then back_index = b_test else { scr_play_snd(Sound.Click); alarm[0] = 1; }
}
//if reactor_index &lt; 2
{
    var n_test = scr_btn_click(next_x, next_y, next_x + next_w, next_y + next_h);
    if n_test &lt; 3 then next_index = n_test else { scr_play_snd(Sound.Click); alarm[1] = 1; }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHIFT REACTORS TO THE LEFT

for(var i=0; i&lt;3; i++)
{
    reactors[i].x -= reactor_w;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DELETE PATHS 
path_delete(path_left);
path_delete(path_right);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_sprite(spr_back_w, back_index, back_x, back_y);
draw_sprite(spr_next_w, next_index, next_x, next_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
