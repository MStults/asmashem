<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sel</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lookat = noone;
chosen = noone;
visible = false;
arrow_image_index = 0;
arrow_x = 0;
arrow_y = 0;
image_speed = .7;

atom_w = sprite_get_width(spr_atom);
atom_h = sprite_get_height(spr_atom);
atom_w_half = atom_w / 2;
atom_h_half = atom_h / 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

// obj_arrow.x = chosen.x + chosen.atom_w_half;
//obj_arrow.y = chosen.y + chosen.atom_h_half;
if visible and global.tutorial 
{
    arrow_image_index = 2;
}
else if visible and instance_exists(lookat) and lookat.speed != 0
{
    arrow_image_index = 0;
}
else if visible &amp;&amp; instance_exists(chosen) &amp;&amp; instance_exists(lookat)
{  
    if lookat.type == AtomType.GamePiece
    then arrow_image_index = lookat.arrow_image_index;  
    else if lookat.type == AtomType.Laser
    or lookat.type == AtomType.Shotgun
    or lookat.type == AtomType.Missile
    or lookat.type == AtomType.Anti
    or lookat.type == AtomType.Mine
    then arrow_image_index = 2;    
    else if chosen.type == AtomType.Iron 
    or lookat.type == AtomType.Iron 
    then arrow_image_index = 3;
    else if lookat.type = AtomType.Dop 
    or lookat.type == AtomType.Lightning 
    then arrow_image_index = 2;
    else if scr_could_react(lookat, chosen) 
    then arrow_image_index = 1 
    else arrow_image_index = 0;    
} 

if visible &amp;&amp; instance_exists(chosen) {
    x = chosen.x;
    y = chosen.y;
    arrow_x = chosen.x + chosen.atom_w_half;
    arrow_y = chosen.y + chosen.atom_h_half;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW ARROW
//Rotate and Draw
if visible &amp;&amp; instance_exists(lookat) 
{
    var angle = point_direction(arrow_x, arrow_y, lookat.x + atom_w_half, lookat.y + atom_h_half);
    draw_sprite_ext(spr_arrow, arrow_image_index, arrow_x, arrow_y, 1, 1, angle, image_blend, image_alpha);
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXIT
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
