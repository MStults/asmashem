<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_lvl_tile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

room_index = 0;

center_x = x + (sprite_width / 2) | 0;
center_y = y + (sprite_height / 2) | 0;

locked = false;
lvl = "0";
star_cnt = 0;

text_y = y + 18;
star_sm_w = 25;
star_sm_h = 25;
star_sm_y = center_y - 5;

star_lg_w = 30;
star_lg_h = 30;
star_lg_y = y + 60;

star1_x = x + 12;
star2_x = center_x - star_lg_w / 2;
star3_x = x + sprite_width - star_sm_w - 12;

star1_index = 0;
star2_index = 0;
star3_index = 0;

if room == rm_bcp_levels then sprite_index = spr_lvl_title_2;
if room == rm_gvr_levls then sprite_index = spr_lvl_title_3;

destroy = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_bg1</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_bg2</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///load level
score = 0;
scr_play_snd(Sound.Click);
if not global.dialog_shown 
{
    global.first_ad_call = true;
    global.ad_last_shown = current_time;
    room_goto(room_index);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//locked = false;
if TESTING then locked = false;

if locked 
{
    image_index = 3;
} else {
    image_index = 0;
    if obj_level_menu.swipe_block then exit;
    image_index =  scr_btn_click(x, y, x + sprite_width, y + sprite_height);
    if image_index == 3 
    {
        alarm[0] = 1;
        image_index = 2;
    }
    
    if star_cnt &gt; 0 then star1_index = 1 else star1_index =0;
    if star_cnt &gt; 1 then star2_index = 1 else star2_index =0;
    if star_cnt &gt; 2 then star3_index = 1 else star3_index =0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
path_speed = 0;
if destroy then instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if locked then exit;

star1_x = x + 12;

center_x = x + (sprite_width / 2) | 0;
star2_x = center_x - (star_lg_w / 2) | 0;
star3_x = x + sprite_width - star_sm_w - 12;

//draw_set_font(global.fnt_game_36);
draw_set_font(fn_30);
draw_set_colour(c_white);
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

if string_length(lvl) &lt; 3 
{
    //draw_text(center_x, text_y + 24, lvl);
    scr_draw_text_outline(center_x, text_y + 14, lvl, c_white, c_black);
} else {
    scr_draw_text_outline_ext(center_x, text_y, lvl, c_white, c_black, .65, .65);
    //draw_text_ext_transformed(center_x, text_y, lvl, 0, 100, .65, .65, 0);
}

draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_sprite_stretched(spr_atom_sym, star1_index, star1_x, star_sm_y, star_sm_w, star_sm_h);
draw_sprite_stretched(spr_atom_sym, star2_index, star2_x, star_lg_y, star_lg_w, star_lg_h);
draw_sprite_stretched(spr_atom_sym, star3_index, star3_x, star_sm_y, star_sm_w, star_sm_w);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
