<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atom = noone;
missile_atom = noone;

enum MissileState
{
    Idle
    , Waiting4AtomMove
    , InFlight
    , StartLaunch
    , StopLaunch
    , Done
}
state = MissileState.Idle;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atom.state = AtomState.WaitQuietly;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///START  

state = MissileState.Waiting4AtomMove;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch(state)
{
    case MissileState.Waiting4AtomMove:
        
        if atom.state == AtomState.WaitQuietly
        {                  
            atom.state = AtomState.Wait;
            state = MissileState.StartLaunch;                        
            with(missile_atom) state = AtomState.Missiling; 
            with(atom)scr_smoke_atom(false);  
        }  
        break;
        
    case MissileState.StartLaunch:  
        //Launch Missiles
        var target_type = atom.type;
        var x_missile = x;
        var y_missile = y; 
        var delay_delta = 5;
        var delay = 2;
        
        with(obj_atom)
        {
            if type == target_type and scr_ready(id)
            {
                var missile = instance_create(x_missile, y_missile, obj_missile);
                missile.target = id;
                missile.alarm[0] = delay;
                delay += delay_delta;       
            }
        }        
        var main_missile = instance_create(x,y, obj_missile);
        main_missile.target = atom;
        main_missile.alarm[0] = delay;    
        state = MissileState.InFlight;  
        alarm[1] = delay + room_speed;
        break;   
        
    case MissileState.InFlight:  
        if  global.missile_cnt &lt; 1
        {
            with(missile_atom)
            {
                state = AtomState.MissileEnd;   
            }         
            instance_destroy();
        }
        break;
}
//if state == MissileState.StartLaunch or  state == MissileState.InFlight
//then with(atom) scr_smoke_atom(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
