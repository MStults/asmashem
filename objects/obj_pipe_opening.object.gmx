<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pipe_opening</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>obj_game_piece</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT VARIABLES
gp_type = GP.Pipe;

pipe_type = PipeType.Opening;
pipe_atom = noone;

pipe_connections = 0;
pipe_receiving = noone;
receiving_dir = 0;

pipe_path = noone;
pipe_end = noone;

enum GPPState
{
    Waiting4Atom
    , Waiting2SendAtom
    , Piping   
    , Receiving
    , AtomAtDestination
    , Sending
    , Waitting2Suck
    
}

state = GPPState.Waiting4Atom;

image_speed = 0;
image_index = 0;
occupied = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE
if state == GPPState.Waiting4Atom 
{
    arrow_image_index = ARROW_BLUE;
} else {
    arrow_image_index = ARROW_GRAY;
}

occupied = scr_pipe_opening_is_atom_there();

//show_debug_message("PIPE STATE: " + string(state));

switch(state)
{        

    case GPPState.Waiting4Atom:      
        image_index = 0;
        //is the atom ready to go
        if scr_pipe_opening_check_for_atom()
        {                   
            if not spr_pipe_send()
            then state = GPPState.Waitting2Suck;
        }                
        break;  
        
    case GPPState.Waitting2Suck:
        image_index = 2;
        
        if occupied and scr_ready(pipe_atom)
        then spr_pipe_send();     
        else state = GPPState.Waiting4Atom;   
        break;        
        
    case GPPState.AtomAtDestination: 
        image_index = 0;
        if not occupied
        then state = GPPState.Waiting4Atom;
        
        if instance_exists(pipe_atom) and pipe_atom.state == AtomState.PipeOpeningReached
        {
             pipe_atom.state = AtomState.Idle;  
             //pipe_atom.depth = 0;
        }
           
        break;
        
    case GPPState.Receiving:
        var good = instance_exists(pipe_atom);
        
        if good and pipe_atom.state == AtomState.Piping 
        or good and pipe_atom.state == AtomState.MoveToPipeOpening
        or good and pipe_atom.state == AtomState.PipeOpeningReached
        {
            occupied = true;
        } else {
            state = GPPState.Waiting4Atom;
        }
        break;
    
    case GPPState.Sending:
        image_index = 1;       
        if pipe_receiving.state != GPPState.Receiving
        then state = GPPState.Waiting4Atom;
        break;
}
















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SET PIPE CONNECTIONS
for(var i=0; i&lt;4; i++)
{
    pipe_connections[i] =  scr_pipe_update_connections(id , i);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
