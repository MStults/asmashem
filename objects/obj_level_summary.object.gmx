<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dialog</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>obj_dialog</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init UI
btn_w = sprite_get_width(spr_menu_w_lg);
btn_h = sprite_get_height(spr_menu_w_lg);

btn_box_w = 250;
btn_box_h = 70;

x = 30;
y = 50;
width = 450;

var half_w = (x + width / 2) | 0;

middle = (room_width / 2) | 0;

title_reactor_y0 = (y - 10) | 0;
title_reactor_y1 = title_reactor_y0 + 50;

title_x = (x + 35) | 0;
title_y = (y + 120) | 0;

title_lvl_x = half_w;
title_lvl_y = title_y;

var v_space = 50;
var steps = room_speed * 2;
var epsilon = math_get_epsilon();

energy_step = 0;
energy_inc = max(score / steps, epsilon); //max(score / steps | 0, 1);

en_lbl_x = x + 50;
en_lbl_y = y + 195;
en_val_x = half_w;
en_val_y = en_lbl_y;

penalty = abs(global.total_penalty);
penalty_step = 0;
penalty_inc = max(penalty / steps, epsilon); //max(penalty / steps | 0, 1);
pn_lbl_x = en_lbl_x;
pn_lbl_y = en_lbl_y + v_space;
pn_val_x = en_val_x;
pn_val_y = pn_lbl_y;

bonus = 0;
if global.challenge_met then bonus = global.challenge_bonus;
bonus_step = 0;
bonus_inc = max(bonus / steps, epsilon); //max(bonus / steps | 0, 1);
bn_lbl_x = pn_lbl_x;
bn_lbl_y = pn_lbl_y + v_space;
bn_val_x = pn_val_x;
bn_val_y = bn_lbl_y;

total = score - penalty + bonus;
total_step = 0;
total_inc = max(abs(total) / steps, epsilon); //max(abs(total) / steps | 0, 1);
tt_lbl_x = bn_lbl_x;
tt_lbl_y = bn_lbl_y + v_space;
tt_val_x = bn_val_x;
tt_val_y = tt_lbl_y;

star1 = -1;
star2 = -1;
star3 = -1;

star2_step = 0;
star3_step = 0;

star_y = tt_val_y + v_space + 15;
var s_offset = (width / 4) | 0;
star1_x = (x + s_offset - sprite_get_width(spr_atom_sym) / 2) | 0;
star2_x = star1_x + s_offset;
star3_x = star2_x + s_offset;

//height = star_y + sprite_get_height(spr_atom_sym) + 10;
 

/**************/
bnt_box_x = (half_w - btn_box_w /2) | 0;
bnt_box_y = star_y + sprite_get_height(spr_atom_sym) + 20; 

can_share = scr_can_share();

share_x = 106;
share_y = bnt_box_y;
share_index = 3;
if not can_share then share_index = 4;

var btn_x_offset = btn_w + 15;
menu_x =  share_x + btn_x_offset;
menu_y =  share_y + 10;
menu_index = 3;

restart_x =  menu_x + btn_x_offset;
restart_y =  menu_y;
restart_index = 3;

next_x =  restart_x + btn_x_offset;
next_y =  restart_y; 
next_index = 3;

scale_btn = 1.25;

menu_x = scr_scale_coordinate(menu_x, btn_w, scale_btn);
menu_y = scr_scale_coordinate(menu_y, btn_h, scale_btn);

restart_x = scr_scale_coordinate(restart_x, btn_w, scale_btn);
restart_y = scr_scale_coordinate(restart_y, btn_h, scale_btn);

next_x = scr_scale_coordinate(next_x, btn_w, scale_btn);
next_y = scr_scale_coordinate(next_y, btn_h, scale_btn);


    
/****************/
//BRAG ABOUT IT
brag_index = 3;
brag_w = sprite_get_width(spr_brag);
brag_h = sprite_get_height(spr_brag);
brag_x = ((room_width - brag_w) / 2) | 0 ;
brag_y = room_height - 82 - 40; 

brag_w_h = (brag_w/2) | 0;
brag_h_h = (brag_h/2) | 0;

can_brag = scr_can_share();
btn_post_exists = false;
/****************/

play_coin_sound = false;
star1_val =0;
star2_val =0;
star3_val =0;

switch(scr_star_test())
{
    case 0: break;
    case 1:
        star1_val = 1;
        break;
    case 2:
        star1_val = 1;
        star2_val = 1;
        break;
    case 3:
        star1_val = 1;
        star2_val = 1;
        star3_val = 1;
        break;
}

step_count = 0;
in_button = false;

reactor0 = "Pleasant";
reactor1 = "Nuclear";
if(Reactor_Key == "BCP")
{
    reactor0 = "Big_City";
    reactor1 = "Power";
}

if(Reactor_Key == "GVR")
{             
    reactor0 = "Golden_Valley";
    reactor1 = "Reactor";
}


//save data 
//show_debug_message("===========&lt;SAVING&gt;==============");
ini_open("atom_smashem.ini"); //OPEN FILE

//OPEN NEXT LEVEL
ini_write_real(Reactor_Key, "ul" +  string(room_next(room)), 1); 

//STAR TOTAL
var total_stars = star1_val + star2_val + star1_val; 

//UPDATE STAR COUNT 
//If STAR TOTAL GREATER THAN EXISTING THEN UPDATE IT 
if ini_read_real(Reactor_Key, "sc" + string(room), 0) &lt; total_stars
then ini_write_real(Reactor_Key, "sc" + string(room), total_stars);

//total score total  
if ini_read_real(Reactor_Key, "ts" + string(room), 0) &lt; total
then ini_write_real(Reactor_Key, "ts" + string(room), total);

ini_close(); 














</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BADGES TESTS AND SETUP
if TESTING
{
    scr_badge_add(BADGES.CHAIN_LIGHTNING_1);
    scr_badge_add(BADGES.CHAIN_LASER_1);
    scr_badge_add(BADGES.CHAIN_SHOTGUN_1);
    scr_badge_add(BADGES.STAR_STREAK_1);
    scr_badge_add(BADGES.FINISH);
}

//TEST CHAIN
scr_badge_record_and_test(BADGES.CHAIN_LIGHTNING_1, "CHAIN_LIGHTNING_1", global.lightning_max_cc, 100);
scr_badge_record_and_test(BADGES.CHAIN_LASER_1, "CHAIN_LASER_1", global.laser_max_cc, 25);
scr_badge_record_and_test(BADGES.CHAIN_SHOTGUN_1, "CHAIN_SHOTGUN_1", global.shotgun_max_cc, 50);

//TEST CERTIFIED
if room == rm_PN_3 then scr_badge_add(BADGES.CERTIFIED);

//TEST STREAK
if room != rm_PN_1 &amp;&amp;  room != rm_PN_2 &amp;&amp;  room != rm_PN_3
{
    var total_stars = star1_val + star2_val + star1_val;     
    scr_badge_test_streak(BADGES.STAR_STREAK_1, total_stars, 5);
    scr_badge_test_streak(BADGES.STAR_STREAK_2, total_stars, 10);
    scr_badge_test_streak(BADGES.STAR_STREAK_3, total_stars, 20);
}


//TEST MISSLES
scr_badge_record_and_test(BADGES.MISSLE1, "MISSLE1", global.missile_triggers, 100);
scr_badge_record_and_test(BADGES.MISSLE2, "MISSLE2", global.missile_triggers, 150);

//TEST MINE
scr_badge_record_and_test(BADGES.MINE, "MINE", global.mine_triggers, 100);

//TEST DOP
scr_badge_record_and_test(BADGES.DOP, "DOP", global.doppel_triggers, 100);

//TEST ANTI
scr_badge_record_and_test(BADGES.ANTI, "ANTI", global.anti_triggers, 100);

//TEST FINISH
if room == gvr_end_rm then scr_badge_add(BADGES.FINISH);

//TEST IRON
scr_badge_record_and_test(BADGES.IRON, "IRON", global.iron_killed_cnt, 100);

//TEST SHOTGUN
scr_badge_record_and_test(BADGES.SHOT1, "SHOT1", global.shotgun_triggers, 80);
scr_badge_record_and_test(BADGES.SHOT2, "SHOT2", global.shotgun_triggers, 200);

//TEST ATOMS
scr_badge_record_and_test(BADGES.ATOM1, "ATOM1", global.doppel_created, 50);
scr_badge_record_and_test(BADGES.ATOM2, "ATOM2", global.shotgun_created, 50);
scr_badge_record_and_test(BADGES.ATOM3, "ATOM3", global.missile_created, 50);
scr_badge_record_and_test(BADGES.ATOM4, "ATOM4", global.laser_created, 50);
scr_badge_record_and_test(BADGES.ATOM5, "ATOM5", global.anti_created, 50);
scr_badge_record_and_test(BADGES.ATOM6, "ATOM6", global.mine_created, 50);

badge_cnt = array_length_1d(global.badges_earned);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///REMOVE HTML BUTTON
if(btn_post_exists)
{
    FB_hide_brag_btn();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///POST SCORE TO FACEBOOK
scr_play_snd(Sound.Click);
var total_stars = star1_val + star2_val + star1_val; 
//AtomFBPostScore(Reactor_Key, global.lvl_name, total, total_stars);
scr_fb_post_scrore(total, global.lvl_name, Reactor_Key, total_stars);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///play coin

if not play_coin_sound then exit;
scr_play_snd(Sound.Coin);
alarm[3] = room_speed / 14;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Next Level
scr_play_snd(Sound.Click);
score = 0;
global._loaded = false;

if badge_cnt &gt; 0
{
    instance_create(0, 0, obj_badge_manager);
    instance_destroy();
}
else 
{
    room_goto(room_next(room));
}





 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restart level

scr_play_snd(Sound.Click);
with(obj_atom) state = AtomState.DestroyRestart;  

score = 0;
global._loaded = false;
room_restart();

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu
scr_play_snd(Sound.Click);
score = 0;
global._loaded = false;
room_goto(rm_reactor_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>step_count = (step_count + 1) mod room_speed; 

if energy_step &gt;= score 
then energy_step = score;
else energy_step += energy_inc;

if penalty_step &gt;= penalty
then penalty_step = penalty;
else penalty_step += penalty_inc;

if bonus_step &gt;= bonus 
then bonus_step = bonus;
else bonus_step += bonus_inc;

if total &gt; 0
{
    if total_step &gt;= total 
    then total_step = total;
    else total_step += total_inc;
} else {
    if total_step &lt;= total 
    then total_step = total;
    else total_step -= total_inc;
}

var ui_loaded = false;
if total_step == total and bonus_step == bonus and penalty_step == penalty and energy_step == score
{
    star1 = star1_val; //set star one
    play_coin_sound  = false;    
      
    if star2_step &lt; room_speed / 4 
    {
        if star2_step &lt; 1 then scr_play_snd(Sound.Coin);
        star2_step++;        
    } else {         
        star2 = star2_val; //set star two               
        if star3_step &lt; room_speed / 4
        {
            if star3_step &lt; 1 then scr_play_snd(Sound.Coin);
            star3_step++;
            if star3_step &gt;= room_speed / 4 then scr_play_snd(Sound.Coin);
        } else {    
            star3 = star3_val; //set star three                 
            ui_loaded = true;
        }
    }    
    
} else if not play_coin_sound{
    play_coin_sound  = true;
    alarm[3] = 1;
}

if not ui_loaded then exit;

//buttons
if can_share
{
    share_index = 0;
    var share_test = scr_btn_click(share_x, share_y, share_x + btn_w, share_y + btn_h);
    if share_test &lt; 3 then share_index = share_test else alarm[4] = 1;
}

menu_index = 0;
var menu_test = scr_btn_click(menu_x, menu_y, menu_x + btn_w, menu_y + btn_h);
if menu_test &lt; 3 then menu_index = menu_test else alarm[0] = 1;

restart_index = 0;
var restart_test = scr_btn_click(restart_x, restart_y, restart_x + btn_w, restart_y + btn_h);
if restart_test &lt; 3 then restart_index = restart_test else alarm[1] = 1;


next_index = 0;
var next_test = scr_btn_click(next_x, next_y, next_x + btn_w, next_y + btn_h);
if next_test &lt; 3 then next_index = next_test else alarm[2] = 1;    

if next_test &gt; 0 
then in_button = true;
else in_button = false;

if can_brag and not btn_post_exists
{    
    var total_stars = star1_val + star2_val + star1_val; 
    FB_show_brag_btn(Reactor_Key, global.lvl_name, total, total_stars);
    btn_post_exists = true; 
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW SUMMARY

scr_draw_dialog_rec();

draw_set_font(fnt_game_36);
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_text(middle, title_reactor_y0, reactor0);
draw_text(middle, title_reactor_y1, reactor1);

draw_set_font(fnt_game_42);
draw_text(middle, title_y, "Level_" + string(global.lvl_name));

//draw_text(title_x, title_y, "Level ");
//draw_text(title_lvl_x, title_lvl_y, global.lvl_name);

draw_set_halign(fa_left);
draw_set_font(fnt_game_20);
draw_text(en_lbl_x, en_lbl_y, "Energy");
draw_text(en_val_x, en_val_y, string(energy_step | 0));

draw_text(pn_lbl_x, pn_lbl_y, "Penalty");

if penalty_step &gt; 0
then draw_text(pn_val_x, pn_val_y,  "-" + string(penalty_step | 0));
else draw_text(pn_val_x, pn_val_y,  "0");

draw_text(bn_lbl_x, bn_lbl_y, "Bonus");
draw_text(bn_val_x, bn_val_y, string(bonus_step | 0));

draw_set_font(fnt_game_36);
draw_text(tt_lbl_x, tt_lbl_y, "Score");
draw_text(tt_val_x, tt_val_y, string(total_step | 0));

if star1 &gt;= 0 then draw_sprite(spr_atom_sym, star1, star1_x, star_y);
if star2 &gt;= 0 then draw_sprite(spr_atom_sym, star2, star2_x, star_y);
if star3 &gt;= 0 then draw_sprite(spr_atom_sym, star3, star3_x, star_y);

draw_set_colour(c_white);
draw_sprite(spr_share_w_lg, share_index, share_x, share_y);
draw_sprite(spr_menu_w_lg, menu_index, menu_x, menu_y);
draw_sprite(spr_restart_w_lg, restart_index, restart_x, restart_y);

if not in_button and next_index &lt; 3
{
    if step_count &lt; room_speed/2 
    then next_index = 0;
    else next_index = 2;
}

draw_sprite(spr_next_w_lg, next_index, next_x, next_y);

/****
if can_brag 
then draw_sprite(spr_brag, brag_index, brag_x, brag_y);
****/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///nothing 
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
