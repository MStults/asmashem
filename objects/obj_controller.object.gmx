<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_progress</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAME SETUP

//show_debug_message("{--{CONTROLER CODE}--}");

spr_prog_frame_sprite = spr_prog_frame;

scr_play_snd(Sound.Start);

state = ControllerState.LoadingAd;
requested_shock_state = false;
chosen = noone;
game_piece = noone;

ligtning_atom = noone;
adjacent = 0;
adjacent[0] = noone;
adjacent[1] = noone;
adjacent[2] = noone;
adjacent[3] = noone;  

adjacent_gp = 0;
adjacent_gp[0] = noone;
adjacent_gp[1] = noone;
adjacent_gp[2] = noone;
adjacent_gp[3] = noone; 
            
adjacent_index = -1;

spr_progress_cnt =  sprite_get_number(spr_progress);
spr_progress_number = 0;
spr_progress_subimg = 0;

atom_w = sprite_get_width(spr_atom);
atom_h = sprite_get_height(spr_atom);
atom_w_half = atom_w / 2;
atom_h_half = atom_h / 2;

floor_h = sprite_get_height(spr_floor);
floor_h_half = floor_h / 2;

//total_atoms = col_cnt * row_cnt;
top_y = 9999;
bottom_y = 0;
left_x = 9999;
right_x = 0;

number_of_atoms = instance_number(obj_atom);
base_number_of_atoms = number_of_atoms;

var i, a;
for(i=0; i&lt;number_of_atoms; i+=1)
{
    a = instance_find(obj_atom,i);    
    top_y = min(top_y, a.y);
    left_x = min(left_x, a.x);    
    bottom_y =  max(bottom_y, a.y);
    right_x = max(right_x, a.x);   
    //a.depth = number_of_atoms - i;
    instance_create(a.x, a.y, obj_board_space)
}

number_of_game_pieces = instance_number(obj_game_piece);
var gp = noone;
for(i=0; i&lt;number_of_game_pieces; i++)
{
    gp = instance_find(obj_game_piece,i);   
    top_y = min(top_y, gp.y);
    left_x = min(left_x, gp.x);    
    bottom_y =  max(bottom_y, gp.y);
    right_x = max(right_x, gp.x);   
    scr_push_replacement_atom(instance_create(0, 0, obj_atom));
    number_of_atoms++;    
    instance_create(gp.x, gp.y, obj_board_space) 
}

var gp_depth = number_of_atoms + 1;
with(obj_game_piece) depth = gp_depth;

gp_depth++;
with(obj_pipe_connection) depth = gp_depth;

gp_depth++;
with(obj_board_space) depth = gp_depth;
/*
for(i=0; i&lt;number_of_game_pieces; i++)
{
    gp = instance_find(obj_game_piece,i);
    with(instance_create(gp.x, gp.y, obj_board_space)) depth = gp_depth;
}
*/

row_cnt = (bottom_y - top_y) / atom_h + 1;
row = 0;

col_cnt = (right_x - left_x) / atom_w + 1;
col = 0;

var xx, yy, j, k=0, col_bottom, bsp_image;

//MAKE CHECKBOARD 
var img_offset = 0;
if(Reactor_Key == "BCP") img_offset = 2;
if(Reactor_Key == "GVR") img_offset = 4;
for(i=0; i&lt;row_cnt; i++)
{
    yy = top_y + atom_h * i;
    bsp_image = i % 2;
    for(k=0; k&lt;col_cnt ; k++)
    {
        xx = left_x + atom_w * k;
        with(instance_position(xx, yy, obj_board_space))
        {
            image_index = ((bsp_image + k) % 2) + img_offset;
        }
    } 
}


//LOAD COLUMN BOTTOM MAP
for(j=0; j&lt;col_cnt; j++)
{   
    col_bottom = 0;
    xx = left_x + atom_w * j;
    for(i=0; i&lt;row_cnt; i++)
    {
         yy = top_y + atom_h * i;
         if instance_position(xx, yy, obj_atom) then
             col_bottom= max(col_bottom, yy); 
    }   
    ds_map_add(column_bottoms, xx, col_bottom);
}

for(i=0; i&lt;row_cnt; i++)
{
    yy = top_y + atom_h * i;
    for(j=0; j&lt;col_cnt; j++)
    {
        xx = left_x + atom_w * j;
        a = instance_position(xx, yy, obj_atom);      
        if a then a.alarm[0] = (k++) * 3 + 1;    
    }
}

progress_glow_alpha_direction = 1;
progress_glow_alpha = 0;
progress_glow_max_alpha = .5;
progress_glow_step_alpha = .017;

hint_index = 0;
hint_no_match_cnt = 0;
alarm[0] = k * 6;

are_atoms_still = false;


//adjust title depth so that it is on top of the atoms
tile_layer_depth(0, -2);

board_state = true; 




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG VARS
ctrl_key_down = false;

enum DEBUG_VIEW
{
    NONE
    , GAME
    , ISO
    , ISO2
}

db_view = DEBUG_VIEW.NONE;

special_atom_queue_size = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEST BADGES

/////TESTING
scr_badge_add(BADGES.CHAIN_SHOTGUN_1);
scr_badge_add(BADGES.CHAIN_LASER_2);
scr_badge_add(BADGES.CHAIN_LIGHTNING_3);
scr_badge_add(BADGES.CERTIFIED);
/////TESTING
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HINT CODE

//set hint alarm
if not global.show_hint
{
    exit;
}
else if state != ControllerState.Scanning 
{
    scr_reset_hint();
}
else if hint_no_match_cnt &gt;= number_of_atoms
{
    //no matches so send in the lightning  
    //obj_lightning_reaction_bolt.atom = instance_find(obj_atom, irandom(number_of_atoms - 1));
    //obj_lightning_reaction_bolt.alarm[0] = 1;
} 
else 
{    
    var operand = instance_find(obj_atom,hint_index);
    var found = false;
    if operand 
        and operand.speed == 0 
        and operand.state == AtomState.Idle 
    {
        if operand.type == AtomType.Lightning  
        {
            found = true;
        } else {
            var adj;
            with(operand)adj = scr_get_adjacent();
            for(var i=0; i&lt;4; i++)
            {
                if adj[i] and  scr_could_react(adj[i], operand)
                {
                    found = true;
                    break;
                }
            }
        } 
    }       
    
    if found 
    {   
        operand.display_hint = true;     
        scr_reset_hint();          
    } else {
        hint_no_match_cnt++;
        alarm[0] = 2;
    }    
        
    hint_index++;
    if hint_index &gt;= number_of_atoms then hint_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control the state of the game 
///by checking atoms and player movment 
var xx,  yy;

//show or hide game board
if board_state != global.show_board
{
    board_state = global.show_board;
    with(obj_board_space)
    {
        visible = other.board_state;
    }
}

if state == ControllerState.Paused then exit;
if scr_loaded() and state != ControllerState.Scanning then scr_reset_hint(); 

switch(state)
{    
    case ControllerState.LoadingAd:
        if scr_loaded()
        {            
            scr_ad_show();
            state = ControllerState.Scanning;
        }
        break;
    case ControllerState.GlobalReactionStarted:
        obj_board_space.visible = false;
        break;
        
    case ControllerState.ScanningAndWaiting4Lighting:
    case ControllerState.Scanning:
    
        //Test challenge 
        if not global.challenge_met and global.challenge_test != noone
        {
            global.challenge_met = script_execute(
                global.challenge_test
                , global.challenge_argument0 
                , global.challenge_argument1 
                , global.challenge_argument2 
                , global.challenge_argument3 
                , global.challenge_argument4
                , global.challenge_argument5
                );
            if global.challenge_met 
            {
                instance_create(x, y, obj_challenge_notification);
                spr_progress_subimg = 1;
            }
        }
        
        scr_set_are_atoms_still();        
        if not are_atoms_still then scr_reset_hint(); 
        //show_debug_message("State: Scanning");
        obj_arrow.visible = false;        
        
        var win_score = global.winning_score;
        //if TESTING and win_score  &gt; 6000 then win_score = 6000;
        
        if state !=  ControllerState.ScanningAndWaiting4Lighting and score &gt;= win_score then
        {
            global.end_time = current_time;
            //state = ControllerState.Waiting4GlobalReaction2Started;   
            
            state = ControllerState.GlobalReactionStarted;   
            instance_create(0,0, obj_reaction);
            
            //LOAD AD - will only load if needed
            scr_ad_load();           
        }               
        else if requested_shock_state then
        {
            //global.lightning_shock_cn should be greater than zero before requesting the shock state
            state = ControllerState.Shocking;
            requested_shock_state = false;
        } 
        else if global.enable_user_input and device_mouse_check_button_pressed(0, mb_any) then 
        {
            state = ControllerState.MoveBegin; 
        }
      
        if score &lt; win_score
        {
            repeat (row_cnt) scr_row_start_reactions();
            repeat (col_cnt)scr_col_start_reactions();
        }
        
        break;
    case ControllerState.MoveBegin:
        //show_debug_message("State: MoveBegin");
        xx = device_mouse_x(0);
        yy = device_mouse_y(0);
        scr_clear_selection();
        chosen = collision_point( xx, yy, obj_atom, false, false );        
             
        if chosen 
            &amp;&amp; chosen.state == AtomState.Idle
            &amp;&amp; not scr_has_hole_above(chosen)
        {              
            //all good      
            if chosen.type == AtomType.Lightning 
            {
                global.lightning_triggers++;
                obj_lightning_reaction_bolt.atom = chosen;
                obj_lightning_reaction_bolt.alarm[0] = 1;
                state = ControllerState.ScanningAndWaiting4Lighting; 
            } else {
                chosen.state = AtomState.Chosen0;           
                state = ControllerState.Moving;            
                obj_arrow.chosen = chosen;
                obj_arrow.visible = true;                 
            }
        }
        else
        {
            state = ControllerState.Scanning
        }       
        break;
    case ControllerState.Moving:
        //show_debug_message("State: Moving");
        var gui_x = device_mouse_x(0);
        var gui_y = device_mouse_y(0);
        
        if device_mouse_check_button_released(0, mb_any) 
        {        
            if scr_set_adjacent(gui_x, gui_y) 
            {
                state = ControllerState.MoveEnd;
            }
            else
            {
                 game_piece = scr_set_adjacent_gp(gui_x, gui_y);
                 if game_piece 
                 {
                    state = ControllerState.MoveEndGp;
                 } else {            
                    obj_arrow.visible = false;
                    state = ControllerState.MoveEnd;                 
                 }
            }
           
        }
        else if device_mouse_check_button_pressed(0, mb_left)            
        {      
        
            if scr_set_adjacent(gui_x, gui_y) 
            {
              state = ControllerState.MoveEnd;
            }
            else
            {
                 game_piece = scr_set_adjacent_gp(gui_x, gui_y);
                 if game_piece then state = ControllerState.MoveEndGp;
                 else state = ControllerState.MoveBegin; 
            }    
           
        } else {        
                        
            if scr_set_adjacent(gui_x, gui_y)
            {
                //show_debug_message("ADJ: " + string(adjacent[adjacent_index]));
                for(var i=0; i&lt;4; i++)
                {
                    if !adjacent[i] then continue;
                    adjacent[i].state =  AtomState.Idle;
                    if i == adjacent_index then 
                    {   
                        adjacent[i].state = AtomState.Chosen1;
                        obj_arrow.chosen = chosen;
                        obj_arrow.lookat = adjacent[i];
                        obj_arrow.visible = true;
                    }
                }    
            } else {
            //show_debug_message("GP");
               scr_clear_adjacent();
               game_piece = scr_set_adjacent_gp(gui_x, gui_y);
               if game_piece 
               {
                    obj_arrow.chosen = chosen;
                    obj_arrow.lookat = game_piece;
                    obj_arrow.visible = true;
               }
            }    
        }
        break;
    case ControllerState.MoveEnd:
        //show_debug_message("State: MoveEnd");
        if adjacent_index &lt; 0 || !chosen || !adjacent[adjacent_index]
        {            
            scr_clear_selection();
            state = ControllerState.Scanning;    
        } else {    
            scr_end_move();
        }                
        break;
    case ControllerState.MoveEndGp:
        if not game_piece or not chosen
        {
            scr_clear_selection();
            state = ControllerState.Scanning;    
        } else {
            scr_end_move_gp();
        }
        break;
    case ControllerState.MoveEnding:
        //show_debug_message("State: MoveEnding");
        obj_arrow.visible = false;
        if chosen.state == AtomState.Idle or chosen.state == AtomState.Piping
        {           
            adjacent_index = -1;
            state = ControllerState.Scanning;  
            repeat (row_cnt) scr_row_start_reactions();
            repeat (col_cnt)scr_col_start_reactions();
        }
        break;
        
    case ControllerState.Shocking:
        if global.lightning_shock_cnt &lt; 1 then state = ControllerState.Scanning;  
        break;
    case ControllerState.Doppeling:
        if global.doppeling_cnt &lt; 1 then state = ControllerState.MoveEnding;  
        break;
     case ControllerState.Lasering:
        if global.lasering_cnt &lt; 1 
        {
            state = ControllerState.MoveEnding;  
            event_user(0);
        }
        break;
     case ControllerState.Shotgunning:
        if global.shotgunning_cnt &lt; 1 
        then state = ControllerState.MoveEnding; 
        break;
     case ControllerState.Missiling:  
        if instance_number(obj_missile_launcher) &lt; 1
        then state = ControllerState.Scanning; 
        break;
     case ControllerState.MineExploding:  
        if instance_number(obj_mine_explosion) &lt; 1
        then state = ControllerState.Scanning; 
        break;
     case ControllerState.AnitAnnihilation:  
        if global.aniti_number_attacked &gt;= global.aniti_max_attacked or global.aniti_no_more_targets
        then state = ControllerState.AnitWaitForFinish; 
        break;
     
     case ControllerState.AnitWaitForFinish:  
        if instance_number(obj_anti) &lt; 1
        {
            global.aniti_number_attacked = 0;
            global.aniti_no_more_targets = false;
            global.aniti_max_attacked = ANTI_START_ATTACK_CNT;
            state = ControllerState.Scanning; 
        }
        break;
        
    case ControllerState.LightningChosen:
        if requested_shock_state 
        {
            //global.lightning_shock_cn should be greater than zero before requesting the shock state
            state = ControllerState.Shocking;
            requested_shock_state = false;
        }
        break;
}





















</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control the progress glow
//progress_glow_alpha_direction = 1;
//progress_glow_alpha = 0;
//progress_glow_max_alpha = .5;
//progress_glow_step_alpha = .017;

if progress_glow_alpha_direction then 
{
    progress_glow_alpha += progress_glow_step_alpha;
    if progress_glow_alpha &gt;= progress_glow_max_alpha then progress_glow_alpha_direction = 0;
}
else 
{
    progress_glow_alpha -= progress_glow_step_alpha;
    if progress_glow_alpha &lt;= 0 then progress_glow_alpha_direction = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SET DEBUG VARS 
if db_view == DEBUG_VIEW.GAME
then special_atom_queue_size = ds_queue_size(global.special_atom_queue);
else special_atom_queue_size = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_laser</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_play_snd</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>Sound.LaserEnd</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CUT score in half


//global.winning_score = (global.winning_score / 3) | 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHOW_STATE


if SHOW_STATE
{
    sc = 1;    
    draw_set_font(fn_30);         
    scr_draw_text_outline(x + 10, y + 40,  "GAME STATE: " + string(state), c_white, c_black);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW DEBUG REC
if db_view == DEBUG_VIEW.NONE then exit;
draw_set_colour(c_black);
draw_set_alpha(0.7);
draw_roundrect(0, 540, room_width, room_height, false);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW DEBUG GAME
if db_view == DEBUG_VIEW.GAME
{
    draw_set_font(fn_30);    
    var xx = 10, xx2 = 170, xx3 = 310, yy = 550, lh = 20, sc = 0.4;    
    draw_set_colour(c_white);
    
    draw_text_transformed(xx2, yy,  "GAME STATE", sc, sc, 0);
    yy+= lh;
    
     draw_text_transformed(xx2, yy,  "STATE: " + scr_controller_state_str() , sc, sc, 0);
    yy+= lh;
    
    draw_text_transformed(xx, yy,  "challenge met: " + string(challenge_met), sc, sc, 0);
    draw_text_transformed(xx2, yy, "challenge bonus: " + string(challenge_bonus), sc, sc, 0);
    yy+= lh;   
    draw_text_transformed(xx, yy, "consec penalty: " + string(consecutive_penalty), sc, sc, 0);
    yy+= lh;
    draw_text_transformed(xx, yy, "total penalty: " + string(total_penalty), sc, sc, 0);  
    yy+= lh;
    draw_text_transformed(xx, yy,  "tot invalid moves: " + string(total_invalid_moves), sc, sc, 0);
    yy+= lh;
    draw_text_transformed(xx, yy, "tot valid moves: " + string(total_valid_moves), sc, sc, 0);
    yy+= lh;
    draw_text_transformed(xx, yy, "special queue size: " + string(special_atom_queue_size), sc, sc, 0);
    
    yy+= lh;
    draw_text_transformed(xx, yy, "show hint: " + string(show_hint), sc, sc, 0);
    draw_text_transformed(xx2, yy, "fx vol: " + string(fx_snd_vol), sc, sc, 0);
    draw_text_transformed(xx3, yy, "bg vol: " + string(bg_snd_vol), sc, sc, 0);
    
    
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW DEBUG ISO
if db_view == DEBUG_VIEW.ISO
{
    draw_set_font(fn_30);    
    var xx = 0, xx2 = 150, xx3 = 300, yy = 550, lh = 20, sc = 0.4;    
    draw_set_colour(c_white);
    draw_text_transformed(xx2 , yy,  "ISOTOPE METRICS 1", sc, sc, 0);
    
    //ANTIMATTER
    yy+= lh;
    draw_text_transformed(xx, yy,  "    ant vc: " + string(anti_vc), sc, sc, 0);
    draw_text_transformed(xx2, yy, "ant max vc: " + string(anti_max_vc), sc, sc, 0);
    draw_text_transformed(xx3, yy, "ant tot vc: " + string(anti_tot_vc), sc, sc, 0);
    
    yy+= lh;
    draw_text_transformed(xx, yy,  "    ant cc: " + string(anti_cc), sc, sc, 0);
    draw_text_transformed(xx2, yy, "ant max cc: " + string(anti_max_cc), sc, sc, 0);
    
    //LASER
    yy+= lh;
    draw_text_transformed(xx, yy,  "    las vc: " + string(laser_vc), sc, sc, 0);
    draw_text_transformed(xx2, yy, "las max vc: " + string(laser_max_vc), sc, sc, 0);
    draw_text_transformed(xx3, yy, "las tot vc: " + string(laser_tot_vc), sc, sc, 0);
    
    yy+= lh;
    draw_text_transformed(xx, yy,  "    las cc: " + string(laser_cc), sc, sc, 0);
    draw_text_transformed(xx2, yy, "las max cc: " + string(laser_max_cc), sc, sc, 0);
    
    //MISSILE
    yy+= lh;
    draw_text_transformed(xx, yy,  "    mis vc: " + string(missile_vc), sc, sc, 0);
    draw_text_transformed(xx2, yy, "mis max vc: " + string(missile_max_vc), sc, sc, 0);
    draw_text_transformed(xx3, yy, "mis tot vc: " + string(missile_tot_vc), sc, sc, 0);
    
    //SHOTGUN
    yy+= lh;
    draw_text_transformed(xx, yy,  "    sho vc: " + string(shotgun_vc), sc, sc, 0);
    draw_text_transformed(xx2, yy, "sho max vc: " + string(shotgun_max_vc), sc, sc, 0);
    draw_text_transformed(xx3, yy, "sho tot vc: " + string(shotgun_tot_vc), sc, sc, 0);
    
    yy+= lh;
    draw_text_transformed(xx, yy,  "    sho cc: " + string(shotgun_cc), sc, sc, 0);
    draw_text_transformed(xx2, yy, "sho max cc: " + string(shotgun_max_cc), sc, sc, 0);
    
    //LIGHTNING
    yy+= lh;
    draw_text_transformed(xx, yy,  "    lig vc: " + string(lightning_vc), sc, sc, 0);
    draw_text_transformed(xx2, yy, "lig max vc: " + string(lightning_max_vc), sc, sc, 0);
    draw_text_transformed(xx3, yy, "lig tot vc: " + string(lightning_tot_vc), sc, sc, 0);
    
    yy+= lh;
    draw_text_transformed(xx, yy,  "    lig cc: " + string(lightning_cc), sc, sc, 0);
    draw_text_transformed(xx2, yy, "lig max cc: " + string(lightning_max_cc), sc, sc, 0);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW DEBUG TRIGGERS
if db_view == DEBUG_VIEW.ISO2
{
    draw_set_font(fn_30);    
    var xx = 10, xx2 = 180, xx3 = 310, yy = 550, lh = 20, sc = 0.4;     
    draw_set_colour(c_white);
    draw_text_transformed(xx2 , yy,  "ISOTOPE METRICS 2", sc, sc, 0);
    
    yy+= lh;
    draw_text_transformed(xx, yy,  "doppel tri " + string(doppel_triggers), sc, sc, 0);
    draw_text_transformed(xx2, yy, "doppel cnt " + string(doppel_created), sc, sc, 0);
    yy+= lh;
    draw_text_transformed(xx, yy,  "shotgu tri " + string(shotgun_triggers), sc, sc, 0);
    draw_text_transformed(xx2, yy, "shotgu cnt " + string(shotgun_created), sc, sc, 0);
    yy+= lh;
    draw_text_transformed(xx, yy,  "missile tri " + string(missile_triggers), sc, sc, 0);
    draw_text_transformed(xx2, yy, "missile cnt " + string(missile_created), sc, sc, 0);
    yy+= lh;
    draw_text_transformed(xx, yy,  "laser  tri " + string(laser_triggers), sc, sc, 0);
    draw_text_transformed(xx2, yy, "laser  cnt " + string(laser_created), sc, sc, 0);
    yy+= lh;
    draw_text_transformed(xx, yy,  " ant-m tri " + string(anti_triggers), sc, sc, 0);
    draw_text_transformed(xx2, yy, " ant-m cnt " + string(anti_created), sc, sc, 0);
    yy+= lh;
    draw_text_transformed(xx, yy,  "lightn tri " + string(lightning_triggers), sc, sc, 0);
    draw_text_transformed(xx2, yy, "lightn cnt " + string(lightning_created), sc, sc, 0);
    yy+= lh;
    draw_text_transformed(xx, yy, "Iron death cnt " + string(iron_killed_cnt), sc, sc, 0);
    //global.iron_killed_cnt
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw progress
//min .18
//max  .92
// 0.74 = 0.92 - 0.18
//scale = 0.74 / win * score + 0.18

//draw_sprite(spr_prog_frame_sprite, 0, x, y);
draw_sprite_ext(spr_prog_frame_sprite, 0, x, y, 1, 1, 0, c_white, 1);

if state != ControllerState.GlobalReactionStarted
{

    image_xscale = 0.74 / global.winning_score * score + 0.18; 
    //image_xscale = .92;
    //image_speed = image_xscale;
}
draw_set_colour(c_lime);
draw_sprite_ext(sprite_index, spr_progress_subimg, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha); 
draw_sprite_ext(sprite_index, 2, x, y, image_xscale, image_yscale, image_angle, image_blend, progress_glow_alpha * image_xscale); 

//draw_set_colour(c_white);
//draw_text(x + 100, y + 100, "STATE: " + string(state));

// draw_set_colour(c_yellow);
// draw_text(32, 64, "FPS=" + string(fps));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OPEN / CLOSE ISOTOPE DEBUG
if ctrl_key_down 
{
    if db_view == DEBUG_VIEW.ISO2 then db_view = DEBUG_VIEW.NONE;
    else db_view = DEBUG_VIEW.ISO2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OPEN / CLOSE ISOTOPE DEBUG
if ctrl_key_down 
{
    if db_view == DEBUG_VIEW.ISO then db_view = DEBUG_VIEW.NONE;
    else db_view = DEBUG_VIEW.ISO;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OPEN / CLOSE GAME DEBUG
if ctrl_key_down 
{
    if db_view == DEBUG_VIEW.GAME then db_view = DEBUG_VIEW.NONE;
    else db_view = DEBUG_VIEW.GAME;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ctrl_key_down = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ctrl_key_down = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
