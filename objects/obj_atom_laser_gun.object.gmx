<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_atom_laser_gun</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atom = noone;
laser_atom = noone;
other_gun = noone;
offset = 10;
orientation = 0;
other_color = c_white;

right_x = x + offset;
left_x = sprite_width + x - offset;
top_x = x;
top_y = y + sprite_height - offset; 
 
bottom_x = x;
bottom_y = y + offset; 

enum LaserGunState
{
    Idle
    , Waiting4AtomMove
    , Lasering
    , StartLasering
    , Cooking
    , Stop
    , Done
}

state = LaserGunState.Idle;

has_left = true;
has_right = true;
has_top = true;
has_bottom = true;

cx = x + sprite_width / 2;
cy = y + sprite_height / 2;

image_speed = 2;
color_flag = true;
cooker_cnt = 0;
global.lasering_cnt++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CHECKS IF IT IS STILL LASERING IF SO THEN IT PUTSTHE LASER IN A STOP STATE
if state == LaserGunState.Lasering then state = LaserGunState.Stop;   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHUTDOWN
if instance_exists(atom) then with(atom)
{
    state = AtomState.Idle;    
}

with(laser_atom)
{
    state = AtomState.LaserEnd;
    cooking_state = CookedState.Done;
    scr_smoke_atom(true);
} 
            
//laser_atom
global.lasering_cnt--;
if global.lasering_cnt &lt; 0 then global.lasering_cnt = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHOOT
if state != LaserGunState.Lasering and state != LaserGunState.Cooking 
then exit;

if orientation == 0
{
    if has_top 
    {
        var b = instance_create(cx, cy - offset, obj_laser_beam);
        b.direction = 90;
        b.image_angle = 90;
        if color_flag 
        then b.image_blend = other_color;
        else b.image_blend =  -1;
        b.gun = id;
        b.alarm[0] = 2;
    }
    
    if has_bottom
    {
        var b = instance_create(cx, cy + offset, obj_laser_beam);
        b.direction = 270;
        b.image_angle = 270;
        if color_flag 
        then b.image_blend = other_color;
        else b.image_blend = -1;
        b.gun = id;
        b.alarm[0] = 2;
    }
}
else 
{
    if has_left 
    {
        var b = instance_create(cx - offset, cy, obj_laser_beam);
        b.direction = 180;
        b.image_angle = 180;
        if color_flag 
        then b.image_blend = other_color;
        else b.image_blend =  -1;
        b.gun = id;
        b.alarm[0] = 2;
    }
    
    if has_right
    {
        var b = instance_create(cx + offset, cy, obj_laser_beam);
        b.direction = 0;
        if color_flag 
        then b.image_blend = other_color;
        else b.image_blend =  -1;
        b.gun = id;
        b.alarm[0] = 2;
    }

}
color_flag = !color_flag;
alarm[1] = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start

//orientation = 1 vert
//orientation = 0 hori
//switch direction based on Russ's imput
if instance_exists(atom) and atom.x == x then orientation = 0;
else if instance_exists(atom) then orientation = 1;
else orientation = (other_gun.orientation + 1) mod 2;

if instance_exists(atom) then other_color = atom.p_color;
else other_color = other_gun.other_color;

if instance_exists(other_gun) then state = LaserGunState.StartLasering;
else state = LaserGunState.Waiting4AtomMove;

//Because of switching direction I removed code that prevents it from going both directions e.g left and right ot top and bottom
/******
if instance_position(x, y - sprite_height, obj_atom) == noone then has_top = false;//top
if instance_position(x - sprite_width, y, obj_atom) == noone then has_left = false;
if instance_position(x + sprite_width, y, obj_atom) == noone then has_right = false;
if instance_position(x, y + sprite_height, obj_atom) == noone then has_bottom = false;

if !has_top
    and !has_left
    and !has_right
    and !has_bottom
{
    state = LaserGunState.Stop;
}
*****/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch(state)
{
    case LaserGunState.Waiting4AtomMove:
        if atom.state == AtomState.Wait
        {                  
            state = LaserGunState.StartLasering;                        
            with(laser_atom)
            {
                state = AtomState.Lasering;
            }                   
        }
        break;
    case LaserGunState.StartLasering:
        state = LaserGunState.Lasering;
        alarm[1] = 2;   //START SHOOTING
        alarm[3] = room_speed / 2;  //CHECK IF ANYTHING IS HIT
        visible = true;  
        scr_play_snd(Sound.LaserStart); //laser start sound
        break;
    case LaserGunState.Lasering:  
        event_user(0); //lesering sound
        break;
    case LaserGunState.Cooking:   
        if cooker_cnt &lt; 1 
        {
            state = LaserGunState.Stop;            
        } 
        break;
    case LaserGunState.Stop:
        alarm[2] = room_speed / 4 | 0;
        state = LaserGunState.Done;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>213</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_laser</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_play_snd</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>Sound.Laser</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw 
if orientation == 0
{
    //top
   if has_top then draw_sprite_ext(sprite_index, image_index, top_x, top_y, image_xscale, image_yscale, 90, image_blend, image_alpha); 
   
   //bottom
   if has_bottom then draw_sprite_ext(sprite_index, image_index, bottom_x, bottom_y, -1, image_yscale, 90, image_blend, image_alpha); 
   
   //default
   if not has_bottom and not has_top then draw_sprite(spr_atom_laser_0, image_index, x,y);
        
} else {
    //right
    if has_right then draw_sprite_ext(sprite_index, image_index, right_x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha); 
    
    //left
    if has_left then draw_sprite_ext(sprite_index, image_index, left_x, y, -1, image_yscale, image_angle, image_blend, image_alpha); 
    
    //default
    if not has_left and not has_right then draw_sprite(spr_atom_laser_0, image_index, x,y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
