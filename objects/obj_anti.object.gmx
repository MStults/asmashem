<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_anti_destroy</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atom = noone;
anti_atom = noone;


enum AntiState
{
    Idle
    , Waiting4AtomMove
    , Annihilating
    , StartAnnihilating
    , Stop
    , Done
}

state = AntiState.Idle;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///END

if instance_exists(anti_atom) then with(anti_atom)
{
    state = AtomState.AntiEnd;   
}         

with(atom)
{
    state = AtomState.Recycle;  
    scr_smoke_atom(true);
}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Atom
with(atom)
{
    if(scr_is_excited()) scr_giveup_electrons(ElectronsType.Excited, false, 5);
    else scr_giveup_electrons(ElectronsType.Good, false, 5);       
}

//Update counters 
global.anti_vc++;
global.anti_tot_vc++;
global.anti_max_vc = max(global.anti_max_vc, global.anti_vc);

//end life
alarm[2] = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///START
if instance_exists(anti_atom)
then state = AntiState.Waiting4AtomMove;
else state = AntiState.StartAnnihilating;

//increase attack count based on enery level
if instance_exists(anti_atom)
{
    if anti_atom.energyLevel == AtomEnergyLevel.Second then global.aniti_max_attacked++;
    else if anti_atom.energyLevel == AtomEnergyLevel.Third then global.aniti_max_attacked += 2;
    else if anti_atom.energyLevel == AtomEnergyLevel.Forth then global.aniti_max_attacked += 2;
}

//if the atom being annihilated is an anti atom increase attack count
if atom.type == AtomType.Anti 
{
    global.aniti_max_attacked += 8;
    if atom.energyLevel == AtomEnergyLevel.Second then global.aniti_max_attacked++;
    else if atom.energyLevel == AtomEnergyLevel.Third then global.aniti_max_attacked += 2;
    else if atom.energyLevel == AtomEnergyLevel.Forth then global.aniti_max_attacked += 3;
    
    //update chain counters 
    global.anti_cc++;
    global.anti_max_cc = max(global.anti_max_cc, global.anti_cc);
} else {

    if atom.energyLevel == AtomEnergyLevel.Second then global.aniti_max_attacked += 2;
    else if atom.energyLevel == AtomEnergyLevel.Third then global.aniti_max_attacked += 4;
    else if atom.energyLevel == AtomEnergyLevel.Forth then global.aniti_max_attacked += 8;
}

global.aniti_number_attacked++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch(state)
{
    case AntiState.Waiting4AtomMove:
        if atom.state == AtomState.Wait
        {                  
            state = AntiState.StartAnnihilating;                        
            with(anti_atom)
            {
                state = AtomState.AnitAnnihilation;
            }                   
        }
        break;
    case AntiState.StartAnnihilating:
        state = AntiState.Annihilating;
        
        atom.state = AtomState.Wait; //put the atom operand in a wait state 
        
        visible = true;  
        scr_play_snd(Sound.Antimatter); //start sound
        alarm[1] = room_speed;
        if global.aniti_number_attacked &lt; global.aniti_max_attacked
        {
            instance_create(x, y, obj_aniti_attacker);      
        }
        break;
   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
