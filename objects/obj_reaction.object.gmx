<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_win_dlg</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creating this object will start a reaction and in the game
///This object will handel everything including setting the controller state

center_x = (room_width / 2) | 0;
center_y = (room_height / 2) | 0;
bolt = 0;

x = center_x;
y = center_y;


image_speed = .5;

var xx = obj_lightning_reaction_bolt.x - 16, yy = obj_lightning_reaction_bolt.y - 32;
var bd = obj_lightning_reaction_bolt.depth;
for(var i=0; i&lt;3; i++)
{
    bolt[i] =  instance_create(xx + i * 16, yy - i * 32,  obj_reaction_reaction_bolt);
    bolt[i].x1 = center_x;
    bolt[i].y1 = center_y;
    bolt[i].alarm[0] = 1;
    bolt[i].depth = bd;
}

enum ReactionState
{
    Wait4Lightning
    , Growing
    , PullInAtoms
    , DONE
}

recation_scale = 0.2;
draw_scale = 0.2;
plus_dir = false;

state = ReactionState.Wait4Lightning;

enum AtomReactionState
{
    Normal,
    ShiftStart,
    Shifting,
    Falling
}

atom_state = AtomReactionState.Normal;

electrons_per_second = 0.5;
emitter_interval = 0;

alarm[4] = room_speed * 4;

audio_stop_all();



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LOAD ARRAYS AND CREATE PARTICLES

p_reaction_atoms_cnt = 4;
p_reaction_atoms = 0;
e_sprites = 0;
a_sprites = 0;
e_sprite_index = 0;
e_sprites_cnt = p_reaction_atoms_cnt;

var type_len = array_length_1d(global.atom_type_array);

var type_index = 0;
for(var i=0; i&lt;p_reaction_atoms_cnt; i++)
{
    p_reaction_atoms[i] = part_type_create();
    part_type_sprite(p_reaction_atoms[i],spr_e5w,0,0,0);
    part_type_size(p_reaction_atoms[i],0.50,1.20,0,0);
    
    part_type_speed(p_reaction_atoms[i],4,4,-0.050,2);
    part_type_direction(p_reaction_atoms[i],0,359,0,0);
    part_type_blend(p_reaction_atoms[i],0);
    
    if os_browser == browser_not_a_browser
        then part_type_life(p_reaction_atoms[i],45,90);
        else part_type_life(p_reaction_atoms[i],10,20);
        
    type_index = i % type_len;
    switch(global.atom_type_array[type_index])
    {
        case AtomType.One:
            part_type_sprite(p_reaction_atoms[i],spr_e4y,0,0,0);
            e_sprites[i] = spr_e1b;
            a_sprites[i] = spr_atom_1_0;
            break;
        case AtomType.Two:
            part_type_sprite(p_reaction_atoms[i],spr_e5w,0,0,0);
            e_sprites[i] = spr_e1v;
            a_sprites[i] = spr_atom_2_0;
            break;
        case AtomType.Three:
            part_type_sprite(p_reaction_atoms[i],spr_e1g,0,0,0);
            e_sprites[i] = spr_e1o;
            a_sprites[i] = spr_atom_3_0;
            break;
        case AtomType.Four:
            part_type_sprite(p_reaction_atoms[i],spr_e1b,0,0,0);
            e_sprites[i] = spr_e4y;
            a_sprites[i] = spr_atom_4_0;
            break;
        case AtomType.Five:
            part_type_sprite(p_reaction_atoms[i],spr_e1v,0,0,0);
            e_sprites[i] = spr_e1g;
            a_sprites[i] = spr_atom_5_0;
            break;
        case AtomType.Six:
            part_type_sprite(p_reaction_atoms[i],spr_e1o,0,0,0);
            e_sprites[i] = spr_e6a;
            a_sprites[i] = spr_atom_6_0;
            break;
        case AtomType.Lightning:
            part_type_sprite(p_reaction_atoms[i],spr_e5w,0,0,0);
            e_sprites[i] = spr_e6a;
            a_sprites[i] = spr_atom_lightning;
            break;
        case AtomType.Dop: 
            part_type_sprite(p_reaction_atoms[i],spr_e6a,0,0,0);
            e_sprites[i] = spr_e1g;
            a_sprites[i] = spr_atom_dop_0;
            break;
        case AtomType.Laser:
            part_type_sprite(p_reaction_atoms[i],spr_e1b,0,0,0);
            e_sprites[i] = spr_e1o;
            a_sprites[i] = spr_atom_laser_0;
            break;
        case AtomType.Shotgun:
            part_type_sprite(p_reaction_atoms[i],spr_e_red,0,0,0);
            e_sprites[i] = spr_e1v;
            a_sprites[i] = spr_atom_shotgun_0;
            break;
        case AtomType.Missile:
            part_type_sprite(p_reaction_atoms[i],spr_e_red,0,0,0);
            e_sprites[i] = spr_e1b;
            a_sprites[i] = spr_atom_missile_0;
            break;
        case AtomType.Anti:
            part_type_sprite(p_reaction_atoms[i],spr_e1b,0,0,0);
            e_sprites[i] = spr_e5w;
            a_sprites[i] = spr_atom_anti_0;
            break;
        case AtomType.Mine:
            part_type_sprite(p_reaction_atoms[i],spr_e1v,0,0,0);
            e_sprites[i] = spr_e_red;
            a_sprites[i] = spr_atom_mine_0;
            break;
        case AtomType.Iron:
            part_type_sprite(p_reaction_atoms[i],spr_e1g,0,0,0);
            e_sprites[i] = spr_e1o;
            a_sprites[i] = spr_atom_iron;
            break;
        default:
            part_type_sprite(p_reaction_atoms[i],spr_e_red,0,0,0);
            e_sprites[i] = spr_egood1;
            a_sprites[i] = spr_atom_1_0;
            break;
    }
}; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CLEANUP

for(var i=0; i&lt;p_reaction_atoms_cnt; i++)
    part_type_destroy(p_reaction_atoms[i]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show Next Level
//if not object_exists(obj_next_level) instance_create(0,0, obj_next_level);

//obj_next_level.visible = true;
//scr_play_snd(Sound.Win);

if os_browser != browser_not_a_browser
    then state = ReactionState.DONE;

if instance_exists(obj_BCP_unlock) 
{
    obj_BCP_unlock.alarm[0] = 2;
}
else 
{
    instance_create(0, 0, obj_level_summary);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EMIT Electrons and Atoms at an interval 

if state == ReactionState.DONE then exit;

//CREATE ELECTRON
var x_offset = irandom_range(-14, 14) * electrons_per_second;

var espr = e_sprites[e_sprite_index];
e_sprite_index = (e_sprite_index + 1) % e_sprites_cnt;

with(instance_create(x + x_offset, y, obj_electron))
{
    follow = false;
    points = 0;
    glow = (os_browser == browser_not_a_browser);
    depth = 0;
    sprite_index = espr;   
    alarm[0] = 1;  
}


//ATOM creation
var aspr = a_sprites[e_sprite_index];
with(instance_create(0, 0, obj_flying_reaction_atom))
{
    sprite_index = aspr;
}


alarm[3] = emitter_interval;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RUNS EVERY SEC TO SET ELECTRONS PER SEC AND ATOM PER SEC



alarm[2] = room_speed - 10;

emitter_interval = (room_speed / electrons_per_second) | 0 + 10;
alarm[3] = 1;
if electrons_per_second &lt; 1 then electrons_per_second = 1;
else if electrons_per_second &lt; 8 then electrons_per_second =  2 * electrons_per_second;

//else if electrons_per_second &lt;= 6 then electrons_per_second =  2 * electrons_per_second;
//if electrons_per_second &gt; 7 then electrons_per_second =  7;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHIFT STOP AND START ATOM FALLING



with(obj_atom) 
{
    //STOP    
    speed = 0;   
    
    //FALLING
    gravity_direction = point_direction(x, y, obj_reaction.x - ATOM_H_W, obj_reaction.y - ATOM_H_H);
    gravity = 0.05;    
    state = AtomState.BeingEatenByReaction;
}     

atom_state = AtomReactionState.Falling;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///KILL LIGHTNING BOLTS 

 with(obj_reaction_reaction_bolt) instance_destroy();
 if audio_is_playing(snd_electric_buzz) then audio_stop_sound(snd_electric_buzz);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_win_effect</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MAIN STATE

if global.ui_alpha &gt; 0 
{
    global.ui_alpha -= .02;
    if global.ui_alpha &lt; 0 then global.ui_alpha = 0;
}

switch(state)
{
    case ReactionState.Wait4Lightning:
        var is_struck = true;
        with(obj_reaction_reaction_bolt) if(not ended) is_struck = false;        
        if is_struck 
        {
            state = ReactionState.Growing;
            alarm[0] = 30;           
            atom_state = AtomReactionState.ShiftStart;
            alarm[2] = 15; //START EMITTING ELECTRONS           
        }
        break;
    case ReactionState.Growing:     
    
        
        if(recation_scale &lt; .6)
        {
       
            part_type_scale(global.p_reaction0,recation_scale,recation_scale);
            part_particles_create(global.p_system_front, x , y , global.p_reaction0, 1);               
            
            recation_scale += 0.01;
             
            //if recation_scale &lt; .70 then recation_scale += 0.01;
        }
        else   //if(recation_scale &gt;= .6)
        {        
            
            //var back_scale = recation_scale * 3;
            // part_type_scale(global.p_reaction1, back_scale,back_scale);          
            part_particles_create(global.p_system_back, x , y , global.p_reaction1, 1);  
                       
            var cnt = p_reaction_atoms_cnt;
            if fps &lt; 25 cnt = (p_reaction_atoms_cnt / 2) | 0;
            if fps &lt; 20 cnt = 1;
            for(var i=0; i&lt;cnt; i++)
            {
                part_particles_create(global.p_system_middle, x , y , p_reaction_atoms[i], 1); 
            }         
            
            event_user(0);
        }       
        
        break;
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ATOM STATE

switch(atom_state)
{
    case AtomReactionState.ShiftStart:
        with(obj_atom) 
        {
           state = AtomState.WaitQuietly;
           move_towards_point(other.x - ATOM_H_W, other.y - ATOM_H_H, 5);
        }
        atom_state = AtomReactionState.Shifting;
        alarm[1] = 2;
        break;
    case AtomReactionState.Falling:
        
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_atom">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deactivate atom
with(other)
{
    if state == AtomState.BeingEatenByReaction 
    then instance_deactivate_object(id);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>213</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_reactor</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_play_snd</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>Sound.Reactor</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DESTROY OH BOY
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
