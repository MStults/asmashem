<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mine_n</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT 
mine_atom = noone;
atom = noone;

enum MineState
{
    Idle
    , Exploding 
    , Waiting4AtomMove
}

state = MineState.Idle;

global.mine_cnt++;
cx = x + ATOM_H_W;
cy = y + ATOM_H_H;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///END EXPLOSION
mine_atom.state = AtomState.MineExplosionEnd;
with(atom) 
{
    scr_init_atom_lightning(in_game_piece);   
    state = AtomState.Idle;
} 

/**
var adj = scr_get_all_adjacent();     
scr_play_snd(Sound.Explosion); 
for(var i= 0; i&lt;8; i++)
{
    if scr_ready(adj[i]) 
    then with(adj[i])
    { 
        state = AtomState.DestroyWithPayoff;
       // scr_smoke_atom(false);
        part_particles_create_colour(global.p_system_back, x + ATOM_H_W, y + ATOM_H_H, global.p_poof,c_gray, 5); 
        //part_particles_create(global.p_system_middle, x + ATOM_H_W, y + ATOM_H_H, global.p_explosion, 1); 
    }
}
**/

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///START MINE EXPLOSION
state = MineState.Waiting4AtomMove;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE OF EXPLOSION

cx = mine_atom.x + ATOM_H_W;
cy = mine_atom.y + ATOM_H_H;

switch(state)
{
    case MineState.Waiting4AtomMove:
        if atom.state == AtomState.WaitQuietly
        {                  
            state = MineState.Exploding;                        
            with(mine_atom) state = AtomState.MineExploding;   
            alarm[1] = (room_speed * 1 / 3) | 0;            
            mine_atom.state = AtomState.MineExploding;
            
            //create pieces 
            instance_create(cx, cy, obj_mine_pn);
            instance_create(cx, cy, obj_mine_pe);
            instance_create(cx, cy, obj_mine_ps);
            instance_create(cx, cy, obj_mine_pw);            
            part_particles_create_colour(global.p_system_middle, cx, cy, global.p_poof,c_gray, 5); 
            scr_play_snd(Sound.Explosion);
        }  
        break;
    case MineState.Exploding:
        
        part_particles_create(global.p_system_middle, cx , cy , global.p_explosion, 1); 
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
