<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_atom_shotgun</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atom = noone;
inital_atom = noone;
shotgun_atom = noone;

bp_left = noone;
bp_right = noone;

enum SGOO
{
    Top
    , Right
    , Bottom
    , Left
}

gun_orientation = SGOO.Bottom;

enum ShotgunState
{
    Idle
    , Waiting4AtomMove
    , Shooting
    , StartShooting
    , StopShooting
    , Done
}

state = ShotgunState.Idle;

//2 - yellow
//6 - Red
//12 - Blue
pellets = 0;
pellet_index = 0;

emitter1 = part_emitter_create(p_system_front);

global.shotgunning_cnt++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///KILL EMITTER
 part_emitter_destroy(global.p_system_front, emitter1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///START FROM PELLET

//swap gun orientation
switch(gun_orientation)
{
    case SGOO.Top:
        gun_orientation = SGOO.Bottom;    
        break;
    case SGOO.Right:
        gun_orientation = SGOO.Left;    
        break;
    case SGOO.Bottom:
        gun_orientation = SGOO.Top;    
        break;        
    case SGOO.Left:
        gun_orientation = SGOO.Right;    
        break;
}

state = ShotgunState.StartShooting;
with(shotgun_atom) state = AtomState.Shotgunning;   
scr_shotgun_create_pellets();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHOOT PELLETS 
scr_play_snd(Sound.Shotgun);

for(var i = 0; i&lt;20; i++)
{
    if instance_exists(pellets[i]) then pellets[i].alarm[0] = choose(1, 3, 5);
}

if os_browser == browser_not_a_browser
{
    var cx = x + shotgun_atom.atom_w_half;
    var cy = y + shotgun_atom.atom_h_half;
    part_emitter_region(global.p_system_front,emitter1,cx,cx,cy,cy,ps_shape_ellipse,0);   
    part_emitter_burst(global.p_system_front, emitter1, global.p_shotgun, 20);   
}

/**
if pellet_index &gt;= 20 then exit;

for(var i = pellet_index; i&lt;pellet_index+5; i++)
{
    if i mod 2 == 0
    {
        pellets[i].alarm[0] = 2;
    } 
    else 
    {
         pellets[20 - i].alarm[0] = 2;
    }
}

pellet_index += 5;

alarm[1] = 8;
**/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///START WITH ATOM

if atom.x &lt; shotgun_atom.x 
then gun_orientation = SGOO.Left;
else if atom.x &gt; shotgun_atom.x
then gun_orientation = SGOO.Right;
else if atom.y &lt; shotgun_atom.y
then gun_orientation = SGOO.Top;
else gun_orientation = SGOO.Bottom;
state = ShotgunState.Waiting4AtomMove;
inital_atom = atom;
scr_shotgun_create_pellets();







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

switch(state)
{
    case ShotgunState.Waiting4AtomMove:
        
        if atom.state == AtomState.WaitQuietly
        {                  
            state = ShotgunState.StartShooting;                        
            with(shotgun_atom) state = AtomState.Shotgunning;   
        }  
        break;
        
    case ShotgunState.StartShooting:
        bp_left.alarm[0] = 4; //broken left start
        bp_right.alarm[0] = 4; //broken right start            
        alarm[1] = 1; //shoot pellets start
        state = ShotgunState.StopShooting;       
        break;    
    case ShotgunState.StopShooting:
        //put the atoms in the proper state
        if atom then atom.state = AtomState.Idle;  
        with(shotgun_atom)
        {
            state = AtomState.ShotgunEnd;        
            scr_smoke_atom(false);
        } 
        global.shotgunning_cnt--;
        if global.shotgunning_cnt &lt; 0 then global.shotgunning_cnt = 0;   
        state = ShotgunState.Done;
        break;
    case ShotgunState.Done:    
        instance_destroy();      
        break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
