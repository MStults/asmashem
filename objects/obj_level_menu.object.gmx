<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rec</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT
image_speed = 0;

//rec vars
width = 480;
height = 0; //set after load of level tiles
radius = 20;
alpha = 0.6;
color = make_colour_rgb(218, 187, 254); // c_white;

load_levels = true;
start_room = noone;
end_room = noone;
starting_room = noone;
previous_room_start = noone;
next_room_start = noone;

col_cnt = 4;
row_cnt = 4;

tile_h = sprite_get_width(spr_lvl_tile);
tile_w = sprite_get_height(spr_lvl_tile);

offset_x = (room_width - tile_w * col_cnt) / (col_cnt + 1);
offset_y = 10;

height = row_cnt * (tile_h + offset_y) + 2;
width =  col_cnt * (tile_w + offset_x) + 2;
x = (room_width - width) / 2;

//button window
win_w = sprite_get_width(spr_dialog_sm);
win_h = sprite_get_height(spr_dialog_sm);
win_x = (room_width - win_w) / 2;
win_y = y + height + 10;

//buttons 
back_y = win_y + 8;
back_x = win_x + 10;
back_w = sprite_get_width(spr_back_w);
back_h = sprite_get_height(spr_back_w);

menu_y = back_y;
menu_x = back_x + spr_back_w - 22;
menu_w = sprite_get_width(spr_menu_w);
menu_h = sprite_get_height(spr_menu_w);

next_y = menu_y;
next_x = menu_x + menu_w + 20;
next_w = sprite_get_width(spr_next_w);
next_h = sprite_get_height(spr_next_w);

show_back = true;
show_Menu = true;
show_next = true;

back_index = 0;
menu_index = 0;
next_index = 0;

goto_last_level = true;

spr_dialog_sm_index = 0;
if room == rm_bcp_levels then spr_dialog_sm_index = 1;
if room == rm_gvr_levls then spr_dialog_sm_index = 2;

tile_path = path_lvl_title_left;

swipe_x0 = 0;
swipe_y0 = 0;
swipe_ms_dwn = false;
swipe_block = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///load next rooms
if show_next
{
    previous_starting_room = starting_room;
    starting_room = next_room_start;
    tile_path = path_lvl_title_left;
    scr_level_menu_load_rooms();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu button click
scr_play_snd(Sound.Click);
room_goto(rm_reactor_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load previous rooms
if show_back
{
    next_room_start = starting_room;
    starting_room = previous_starting_room;
    tile_path = path_lvl_title_right;
    scr_level_menu_load_rooms();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///load rooms from starting room

tile_path = path_lvl_title_left;
scr_level_menu_load_rooms();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if device_mouse_check_button_pressed(0, mb_any) 
{
    swipe_block = false;
    swipe_x0 = device_mouse_x(0);
    swipe_y0 = device_mouse_y(0);
    swipe_ms_dwn = true;
}


if swipe_ms_dwn &amp;&amp; device_mouse_check_button_released(0, mb_any) 
{
    swipe_ms_dwn = false;
    var x1 = device_mouse_x(0);
    var y1 = device_mouse_y(0);
    
    if point_distance(swipe_x0, swipe_y0, x1, y1) &gt; 15
    {
        swipe_block = true;
        var dir = x1 - swipe_x0;
        if dir &lt; 0 
        {
            alarm[3] = 1;
        } else {
            alarm[1] = 1;
        }
    
    } else {
        swipe_block = false;
       // alarm[0] = 1;
    }    
} else {
     swipe_block = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///load level menu and handle buttons
//check if loaded 
if load_levels then alarm[0] = 1;

if swipe_block then exit;

//test click
back_index = 3;
if show_back
{    
    var back_test = scr_btn_click(back_x, back_y, back_x + back_w, back_y + back_h);
    if back_test &lt; 3 then
    {
        back_index = back_test 
    }
    else 
    {
        scr_play_snd(Sound.Click);
        alarm[1] = 1;
    }
}

menu_index = 3;
if show_Menu
{
    var menu_test = scr_btn_click(menu_x, menu_y, menu_x + menu_w, menu_y + menu_h);
    if menu_test &lt; 3 then 
    {
        menu_index = menu_test 
    }
    else 
    {
        alarm[2] = 1;
    }
}

next_index = 3;
if show_next
{
    var next_test = scr_btn_click(next_x, next_y, next_x + next_w, next_y + next_h);
    if next_test &lt; 3 
    {
        next_index = next_test 
    } else {
        scr_play_snd(Sound.Click);
        alarm[3] = 1;
    }
} 











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw dialog 
draw_sprite(spr_dialog_sm, spr_dialog_sm_index, win_x, win_y);
draw_sprite(spr_back_w, back_index, back_x, back_y);
draw_sprite(spr_menu_w, menu_index, menu_x, menu_y);
draw_sprite(spr_next_w, next_index, next_x, next_y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw rectangle

exit;

draw_set_colour(color);
draw_set_alpha(alpha);
//scr_draw_rounded_rectangle(x, y, x + width, y + height, radius);
draw_roundrect_colour_ext(x, y, x + width, y + height, radius, radius, color, color, false);
draw_set_alpha(1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
